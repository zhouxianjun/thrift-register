<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

	<!-- 日志存放的路径 ,默认为tomcat下面的logs -->
	<!--  
	<property name="USER_HOME" value="/log/airpush" />
	-->
	<!-- 输出到窗口 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="logfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天分文件存放 ，并压缩 -->
			<fileNamePattern>${filter.logback.dir}/log.%d{yyyy-MM-dd}.txt</fileNamePattern>
			<!-- 例如，假设每天滚动，且 maxHistory 是 6，则只 保留最近 6 天的归档文件，删除之前的文件。 -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
	</appender>
	<appender name="sqlfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天分文件存放 ，并压缩 -->
			<fileNamePattern>${filter.logback.dir}/sql.%d{yyyy-MM-dd}.txt</fileNamePattern>
			<!-- 例如，假设每天滚动，且 maxHistory 是 6，则只 保留最近 6 天的归档文件，删除之前的文件。 -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
	</appender>
	<appender name="errorfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天分文件存放 ，并压缩 -->
			<fileNamePattern>${filter.logback.dir}/error.%d{yyyy-MM-dd}.txt</fileNamePattern>
			<!-- 例如，假设每天滚动，且 maxHistory 是 6，则只 保留最近 6 天的归档文件，删除之前的文件。 -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="otherfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天分文件存放 ，并压缩 -->
			<fileNamePattern>${filter.logback.dir}/other.%d{yyyy-MM-dd}.txt</fileNamePattern>
			<!-- 例如，假设每天滚动，且 maxHistory 是 6，则只 保留最近 6 天的归档文件，删除之前的文件。 -->
			<maxHistory>60</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%date{HH:mm:ss.SSS} [%thread] %-5level %logger{40} - %msg%n</pattern>
		</encoder>
	</appender>
	<appender name="statisticsThreadLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天分文件存放 ，并压缩 -->
			<fileNamePattern>${filter.logback.dir}/statistics_thread.%d{yyyy-MM-dd}.txt</fileNamePattern>
			<!-- 例如，假设每天滚动，且 maxHistory 是 6，则只 保留最近 6 天的归档文件，删除之前的文件。 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%date{HH:mm:ss} %msg%n</pattern>
		</encoder>
	</appender>
	<appender name ="STATISTICSTHREADASYNC" class= "ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold >0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="statisticsThreadLogFile"/>
	</appender>
	<appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold >0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="logfile"/>
	</appender>
	<appender name ="SQLASYNC" class= "ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold >0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="sqlfile"/>
	</appender>
	<appender name ="OTHERASYNC" class= "ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold >0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="otherfile"/>
	</appender>
	<appender name ="ERRORASYNC" class= "ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold >0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref ="errorfile"/>
	</appender>

	<logger name="org.apache.zookeeper.ClientCnxn" level="INFO"/>

	<root level="DEBUG">
		<appender-ref ref="stdout" />
		<!--<appender-ref ref="OTHERASYNC" />
		<appender-ref ref="ERRORASYNC" />-->
	</root>
</configuration>